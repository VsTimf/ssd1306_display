/**
  ******************************************************************************
  * @brief   SSD1306  bitmap driver
  *  Implement "Bitmap" class to show images on the screen
   
                        ##### How to use this driver #####
  ==============================================================================

  The conversion process must meet the following requirements:

  - Bitmaps must be created in ROW order, i.e

   0x00: -------- 0x01: -------- 0x02: --------          0x00 0x01 0x02
   0x03: -------- 0x04: -------- 0x05: --------          0x03 0x04 0x05
   0x06: -------- 0x07: -------- 0x08: --------          0x06 0x07 0x08
   0x09: -------- 0x0A: -------- 0x0B: --------          0x09 0x0A 0x0B

  const uint8_t ( or uint16_t, or uint32_t) img_data[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B};
*/


#include "ssd1306_bitmaps.hpp"


/**
 * @brief Construct a new Bitmap object
 * 
 * @param width                       width of picture in px
 * @param height                      heigth of picture in px
 * @param bitmap_ptr                  pointer to bitmap array
 */
Bitmap::Bitmap(uint8_t width_px, uint8_t height_px, const uint8_t* bitmap_ptr) : w(width_px), h(height_px), data(bitmap_ptr){}




// Big car 128 x 42
#define BIG_CAR_WIDTH  128
#define BIG_CAR_WIDTH_BYTES ((BIG_CAR_WIDTH / 8) + ((BIG_CAR_WIDTH%8) != 0))
#define BIG_CAR_HEIGHT 42
const uint8_t big_car_data[BIG_CAR_WIDTH/8 * BIG_CAR_HEIGHT] = 
{
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 
0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 
0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 
0x1f, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xfc, 
0x3f, 0xf8, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x3f, 0xff, 0xff, 
0x3f, 0xf0, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xfe, 0x1f, 0xff, 0xff, 
0x7f, 0xe3, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0x8f, 0xff, 0xff, 
0x7f, 0xc7, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xc7, 0xff, 0xff, 
0x7f, 0xcf, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xe3, 0xff, 0xff, 
0x7f, 0x9f, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xf3, 0xff, 0xff, 
0xff, 0x9f, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xf1, 0xff, 0xff, 
0xff, 0x1f, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xf9, 0xff, 0xff, 
0xff, 0x3f, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xf9, 0xff, 0xfe, 
0xff, 0x3f, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xf9, 0xff, 0xfe, 
0xff, 0x3f, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xf9, 0xff, 0xfc, 
0xff, 0x3f, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xf9, 0xff, 0xe0, 
0xff, 0x1f, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xf9, 0xf8, 0x00, 
0x3f, 0x9f, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xf1, 0x00, 0x00, 
0x0f, 0x9f, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xf0, 0x00, 0x00, 
0x00, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 
0x00, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x00, 0x00, 
0x00, 0x03, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 
0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

Bitmap big_car = {BIG_CAR_WIDTH, BIG_CAR_HEIGHT, big_car_data};


// Small car 60 x 20
#define SMALL_CAR_WIDTH  60
#define SMALL_CAR_WIDTH_BYTES ((SMALL_CAR_WIDTH / 8) + ((SMALL_CAR_WIDTH%8) != 0))
#define SMALL_CAR_HEIGHT 20
const uint8_t small_car_data[SMALL_CAR_WIDTH_BYTES * SMALL_CAR_HEIGHT] = 
{
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x00, 0x00, 
0x00, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x00, 
0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xc0, 
0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 
0x7c, 0x0f, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xf0, 0x79, 0xe7, 0xff, 0xff, 0xff, 0xef, 0x9f, 0xf0, 
0xf3, 0xfb, 0xff, 0xff, 0xff, 0xdf, 0xdf, 0xf0, 0xf7, 0xfb, 0xff, 0xff, 0xff, 0xdf, 0xef, 0xf0, 
0xf7, 0xfb, 0xff, 0xff, 0xff, 0xdf, 0xef, 0xf0, 0xf7, 0xfb, 0xff, 0xff, 0xff, 0xdf, 0xef, 0xe0, 
0x77, 0xfb, 0xff, 0xff, 0xff, 0xdf, 0xe8, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0x00, 
0x01, 0xf0, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

Bitmap small_car = {SMALL_CAR_WIDTH, SMALL_CAR_HEIGHT, small_car_data};



#define ACCUM_WIDTH  13
#define ACCUM_WIDTH_BYTES ((ACCUM_WIDTH / 8) + ((ACCUM_WIDTH%8) != 0))
#define ACCUM_HEIGHT 8
const uint8_t accum_data[ACCUM_WIDTH_BYTES*ACCUM_HEIGHT*5] = {
    0x7F, 0xE0, 0x80, 0x10, 0x80, 0x18, 0x80, 0x18, 0x80, 0x18, 0x80, 0x18, 0x80, 0x10, 0x7F, 0xE0,
    0x7F, 0xE0, 0x80, 0x10, 0xB0, 0x18, 0xB0, 0x18, 0xB0, 0x18, 0xB0, 0x18, 0x80, 0x10, 0x7F, 0xE0,
    0x7F, 0xE0, 0x80, 0x10, 0xB6, 0x18, 0xB6, 0x18, 0xB6, 0x18, 0xB6, 0x18, 0x80, 0x10, 0x7F, 0xE0,
    0x7F, 0xE0, 0x80, 0x10, 0xB6, 0xD8, 0xB6, 0xD8, 0xB6, 0xD8, 0xB6, 0xD8, 0x80, 0x10, 0x7F, 0xE0,
    0x7F, 0xE0, 0x80, 0x10, 0xA7, 0x18, 0xB7, 0x98, 0x9D, 0xD8, 0x8C, 0xD8, 0x80, 0x10, 0x7F, 0xE0};


Bitmap accum[5] = {
  {ACCUM_WIDTH, ACCUM_HEIGHT, accum_data},
  {ACCUM_WIDTH, ACCUM_HEIGHT, accum_data+16},
  {ACCUM_WIDTH, ACCUM_HEIGHT, accum_data+32},
  {ACCUM_WIDTH, ACCUM_HEIGHT, accum_data+48},
  {ACCUM_WIDTH, ACCUM_HEIGHT, accum_data+64}};
  